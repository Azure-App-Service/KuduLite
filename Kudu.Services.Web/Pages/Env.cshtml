@page
@using System.Collections
@model Kudu.Services.Web.Pages.EnvModel
@inject IHttpContextAccessor httpContextAccessor
@{
    ViewData["Title"] = "Environment";
}

<div class="container">
    <h3>Index</h3>
    <ul>
        <li><a href="#sysInfo">System Info</a></li>
        <li><a href="#appSettings">App Settings</a></li>
        <li><a href="#connectionStrings">Connection Strings</a></li>
        <li><a href="#envVariables">Environment variables</a></li>
        <li><a href="#path">PATH</a></li>
        <li><a href="#httpHeaders">HTTP Headers</a></li>
    </ul>
</div>


<div class="container">
    <h3 id="sysInfo">System info</h3>
    <ul>
        <li>System up time: @TimeSpan.FromMilliseconds(Environment.TickCount)</li>
        <li>OS version: @Environment.OSVersion</li>
        <li>64 bit system: @Environment.Is64BitOperatingSystem</li>
        <li>64 bit process: @Environment.Is64BitProcess</li>
        <li>Processor count: @Environment.ProcessorCount</li>
        <li>Machine name: @Environment.MachineName</li>
        <li>Instance id: @Kudu.Core.Infrastructure.InstanceIdUtility.GetInstanceId()</li>
        <li>Short instance id: @Kudu.Core.Infrastructure.InstanceIdUtility.GetShortInstanceId()</li>
        <li>CLR version: @Environment.Version</li>
        <li>System directory: @Environment.SystemDirectory</li>
        <li>Current working directory: @Environment.CurrentDirectory</li>
        <li>IIS command line: @Environment.CommandLine</li>
        @if (Kudu.Core.Helpers.OSDetector.IsOnWindows())
        {
            var homePath = Environment.GetEnvironmentVariable("HOME");
            var localPath = "d:\\local";
            <li>@homePath usage: @Html.Raw(Kudu.Core.Environment.GetFreeSpaceHtml(homePath))</li>
            if (Kudu.Core.Environment.IsAzureEnvironment() && System.IO.Directory.Exists(localPath))
            {
                <li>@localPath usage: @Html.Raw(@Kudu.Core.Environment.GetFreeSpaceHtml(localPath))</li>
            }
        }
    </ul>

    <h3 id="appSettings">AppSettings</h3>
    <ul class="fixed-width">
        @using System.Configuration;
@using Core.Infrastructure
        @using Microsoft.AspNetCore.Http
        @foreach (string name in System.Configuration.ConfigurationManager.AppSettings)
        {
            <li>
                @name = @System.Configuration.ConfigurationManager.AppSettings[name]
            </li>
        }
    </ul>

    <h3 id="connectionStrings">Connection Strings</h3>
    <ul>
        @foreach (ConnectionStringSettings settings in ConfigurationManager.ConnectionStrings)
        {
            <li>
                <span class="fixed-width">@settings.Name</span>
                <ul class="fixed-width">
                    <li>ConnectionString = @settings.ConnectionString</li>
                    <li>ProviderName = @settings.ProviderName</li>
                </ul>
            </li>
        }
    </ul>

    <h3 id="envVariables">Environment variables</h3>
    <ul class="fixed-width">
        @foreach (DictionaryEntry entry in Environment.GetEnvironmentVariables().OfType<DictionaryEntry>().OrderBy(e => e.Key))
        {
            <li>@entry.Key = @entry.Value</li>
        }
    </ul>

    <h3 id="path">PATH</h3>
    <ul class="fixed-width">
        @foreach (string folder in Environment.GetEnvironmentVariable("PATH").Split(System.IO.Path.PathSeparator).Where(s => !String.IsNullOrWhiteSpace(s)))
        {
            <li>@folder</li>
        }
    </ul>

    <h3 id="httpHeaders">HTTP headers</h3>
    <ul class="fixed-width">
        @foreach (string name in httpContextAccessor.HttpContext.Request.Headers.Keys.OrderBy(s => s))
        {
            <li>@name=@httpContextAccessor.HttpContext.Request.Headers[name].ToString()</li>
        }
    </ul>

    @*
    <h3 id="serverVar">Server variables</h3>
    <ul class="fixed-width">
        @foreach (string name in HttpContext.Connection.OfType<string>().OrderBy(s => s))
        {
            <li>@name=@HttpContext.Connection[name]</li>
        }
    </ul>
        *@
</div>
